services:
  postgres:
    image: postgres:15
    container_name: postgres
    restart: always
    ports:
      - '5432:5432'
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7
    container_name: redis
    ports:
      - '6379:6379'

  zookeeper:
    image: bitnami/zookeeper:latest
    container_name: zookeeper
    ports:
      - '2181:2181'
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    volumes:
      - zookeeper_data:/bitnami/zookeeper

  kafka:
    image: bitnami/kafka:latest
    container_name: kafka
    ports:
      - '9092:9092'
    environment:
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_KRAFT_CLUSTER_ID=abcdefghijklmno1234567
    volumes:
      - kafka_data:/bitnami/kafka
    healthcheck:
      test:
        [
          'CMD-SHELL',
          'kafka-topics.sh --bootstrap-server localhost:9092 --list || exit 1',
        ]
      interval: 10s
      timeout: 5s
      retries: 10

  db-init-auth:
    build:
      context: .
      dockerfile: ./docker/db-init.Dockerfile
    env_file: ./apps/auth/.env
    depends_on:
      postgres:
        condition: service_healthy
    restart: on-failure

  db-init-search:
    build:
      context: .
      dockerfile: ./docker/db-init.Dockerfile
    env_file: ./apps/search/.env
    depends_on:
      postgres:
        condition: service_healthy
    restart: on-failure

  api-gateway:
    container_name: api-gateway
    build:
      context: .
      dockerfile: ./apps/api-gateway/Dockerfile
      target: development
    command: pnpm run start:dev api-gateway
    env_file:
      - ./apps/api-gateway/.env
    ports:
      - '3000:3000'
    volumes:
      - .:/usr/src/app
    depends_on:
      - auth
      - kafka
      - redis
      - postgres

  auth:
    container_name: auth
    build:
      context: .
      dockerfile: ./apps/auth/Dockerfile
      target: development
    command: pnpm run start:dev auth
    env_file:
      - ./apps/auth/.env
    ports:
      - '4001:4001'
    depends_on:
      kafka:
        condition: service_healthy
      redis:
        condition: service_started
      postgres:
        condition: service_healthy
    volumes:
      - .:/usr/src/app
    healthcheck:
      test:
        [
          'CMD-SHELL',
          'kafka-topics.sh --bootstrap-server localhost:9092 --list || exit 1',
        ]
      interval: 10s
      timeout: 5s
      retries: 10

  search:
    container_name: search
    build:
      context: .
      dockerfile: ./apps/search/Dockerfile
      target: development
    command: pnpm run start:dev search
    env_file:
      - ./apps/search/.env
    volumes:
      - .:/usr/src/app
    healthcheck:
      test:
        [
          'CMD-SHELL',
          'kafka-topics.sh --bootstrap-server localhost:9092 --list || exit 1',
        ]
      interval: 10s
      timeout: 5s
      retries: 10
  nonprofit-frontend:
    container_name: nonprofit-frontend
    build:
      context: ./nonprofit-frontend
      dockerfile: Dockerfile
    ports:
      - '4200:80'
    depends_on:
      - api-gateway
    restart: always
    environment:
      - NGINX_HOST=localhost
      - NGINX_PORT=80
    volumes:
      - ./nonprofit-frontend/ngx.conf:/etc/nginx/conf.d/default.con

volumes:
  pgdata:
  kafka_data:
    zookeeper_data:
